//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1.MapService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MapService.IJsonMap")]
    public interface IJsonMap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/Sendmap", ReplyAction="http://tempuri.org/IJsonMap/SendmapResponse")]
        bool Sendmap(byte[] MapByteArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/Sendmap", ReplyAction="http://tempuri.org/IJsonMap/SendmapResponse")]
        System.Threading.Tasks.Task<bool> SendmapAsync(byte[] MapByteArray);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/Getmap", ReplyAction="http://tempuri.org/IJsonMap/GetmapResponse")]
        byte[] Getmap(int mapId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/Getmap", ReplyAction="http://tempuri.org/IJsonMap/GetmapResponse")]
        System.Threading.Tasks.Task<byte[]> GetmapAsync(int mapId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/GetmapsFromUser", ReplyAction="http://tempuri.org/IJsonMap/GetmapsFromUserResponse")]
        byte[] GetmapsFromUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/GetmapsFromUser", ReplyAction="http://tempuri.org/IJsonMap/GetmapsFromUserResponse")]
        System.Threading.Tasks.Task<byte[]> GetmapsFromUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/GetMultipleMapsByMapIDs", ReplyAction="http://tempuri.org/IJsonMap/GetMultipleMapsByMapIDsResponse")]
        byte[] GetMultipleMapsByMapIDs(int[] mapIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/GetMultipleMapsByMapIDs", ReplyAction="http://tempuri.org/IJsonMap/GetMultipleMapsByMapIDsResponse")]
        System.Threading.Tasks.Task<byte[]> GetMultipleMapsByMapIDsAsync(int[] mapIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/GetAllMapsID", ReplyAction="http://tempuri.org/IJsonMap/GetAllMapsIDResponse")]
        byte[] GetAllMapsID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/GetAllMapsID", ReplyAction="http://tempuri.org/IJsonMap/GetAllMapsIDResponse")]
        System.Threading.Tasks.Task<byte[]> GetAllMapsIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/SendmapWithImage", ReplyAction="http://tempuri.org/IJsonMap/SendmapWithImageResponse")]
        string SendmapWithImage(byte[] mapByteArray, byte[] imageByteArray, string mapName, int finalVersion, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/SendmapWithImage", ReplyAction="http://tempuri.org/IJsonMap/SendmapWithImageResponse")]
        System.Threading.Tasks.Task<string> SendmapWithImageAsync(byte[] mapByteArray, byte[] imageByteArray, string mapName, int finalVersion, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/UpdateMapInProgress", ReplyAction="http://tempuri.org/IJsonMap/UpdateMapInProgressResponse")]
        string UpdateMapInProgress(byte[] mapByteArray, byte[] imageByteArray, string mapName, int finalVersion, int mapId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonMap/UpdateMapInProgress", ReplyAction="http://tempuri.org/IJsonMap/UpdateMapInProgressResponse")]
        System.Threading.Tasks.Task<string> UpdateMapInProgressAsync(byte[] mapByteArray, byte[] imageByteArray, string mapName, int finalVersion, int mapId, int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJsonMapChannel : ConsoleApplication1.MapService.IJsonMap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JsonMapClient : System.ServiceModel.ClientBase<ConsoleApplication1.MapService.IJsonMap>, ConsoleApplication1.MapService.IJsonMap {
        
        public JsonMapClient() {
        }
        
        public JsonMapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JsonMapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JsonMapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JsonMapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Sendmap(byte[] MapByteArray) {
            return base.Channel.Sendmap(MapByteArray);
        }
        
        public System.Threading.Tasks.Task<bool> SendmapAsync(byte[] MapByteArray) {
            return base.Channel.SendmapAsync(MapByteArray);
        }
        
        public byte[] Getmap(int mapId) {
            return base.Channel.Getmap(mapId);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetmapAsync(int mapId) {
            return base.Channel.GetmapAsync(mapId);
        }
        
        public byte[] GetmapsFromUser(int userId) {
            return base.Channel.GetmapsFromUser(userId);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetmapsFromUserAsync(int userId) {
            return base.Channel.GetmapsFromUserAsync(userId);
        }
        
        public byte[] GetMultipleMapsByMapIDs(int[] mapIds) {
            return base.Channel.GetMultipleMapsByMapIDs(mapIds);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetMultipleMapsByMapIDsAsync(int[] mapIds) {
            return base.Channel.GetMultipleMapsByMapIDsAsync(mapIds);
        }
        
        public byte[] GetAllMapsID() {
            return base.Channel.GetAllMapsID();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetAllMapsIDAsync() {
            return base.Channel.GetAllMapsIDAsync();
        }
        
        public string SendmapWithImage(byte[] mapByteArray, byte[] imageByteArray, string mapName, int finalVersion, int userId) {
            return base.Channel.SendmapWithImage(mapByteArray, imageByteArray, mapName, finalVersion, userId);
        }
        
        public System.Threading.Tasks.Task<string> SendmapWithImageAsync(byte[] mapByteArray, byte[] imageByteArray, string mapName, int finalVersion, int userId) {
            return base.Channel.SendmapWithImageAsync(mapByteArray, imageByteArray, mapName, finalVersion, userId);
        }
        
        public string UpdateMapInProgress(byte[] mapByteArray, byte[] imageByteArray, string mapName, int finalVersion, int mapId, int userId) {
            return base.Channel.UpdateMapInProgress(mapByteArray, imageByteArray, mapName, finalVersion, mapId, userId);
        }
        
        public System.Threading.Tasks.Task<string> UpdateMapInProgressAsync(byte[] mapByteArray, byte[] imageByteArray, string mapName, int finalVersion, int mapId, int userId) {
            return base.Channel.UpdateMapInProgressAsync(mapByteArray, imageByteArray, mapName, finalVersion, mapId, userId);
        }
    }
}
